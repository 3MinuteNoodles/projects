unit Users_u;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ComCtrls,
  Vcl.ExtCtrls, dmdbWhysapp_u, Keywords_u;

type
  TfrmUsers = class(TForm)
    pnlManageUsers: TPanel;
    cmbSelectUser: TComboBox;
    btnToggleEnabled: TButton;
    redUsersKeywordMatches: TRichEdit;
    pnlUserID: TPanel;
    pnlFirst_name: TPanel;
    pnlSurname: TPanel;
    pnlPassword: TPanel;
    pnlDisabled: TPanel;
    pnlType: TPanel;
    lblUserKeywordMatches: TLabel;
    lblSelectUser: TLabel;
    btnLogout: TButton;
    lblSort: TLabel;
    cmbSort: TComboBox;
    pnlBirthday: TPanel;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure cmbSelectUserChange(Sender: TObject);
    procedure btnToggleEnabledClick(Sender: TObject);
    procedure btnLogoutClick(Sender: TObject);
    procedure cmbSortChange(Sender: TObject);
  private
    { Private declarations }
  var
    iUser1, iUser2, iLetter: integer;
    ArrUserName: array [1 .. 1000] of string;
    ArrUserID: array [1 .. 1000] of integer;
    arrKeywords: array [1 .. 256] of string;
    arrFound: array [1 .. 256] of boolean;
    arrWeight: array [1..256] of integer;
    function Decrypt(sMessage: string): string;

  var
    iNumUsers, iUser, iNumKeywords: integer;
  public
    { Public declarations }
  end;

var

  frmUsers: TfrmUsers;

implementation

uses
  AdminHome_u;

{$R *.dfm}

procedure TfrmUsers.btnLogoutClick(Sender: TObject);
begin
  frmAdminHome.show;
  frmUsers.hide;
end;

procedure TfrmUsers.btnToggleEnabledClick(Sender: TObject);
var
  bFound: boolean;
begin
  with dmdbWhysapp do
  begin
    tblUsers.open;
    tblUsers.first;


    while not(tblUsers.eof) do
    begin

      //changing whether the user is enabled
      if tblUsers['UserID'] = iUser then
      begin
        tblUsers.edit;
        bFound := True;
        if tblUsers['IsDisabled'] then
        begin
          tblUsers['IsDisabled'] := False;
        end
        else if not tblUsers['IsDisabled'] then
        begin
          tblUsers['IsDisabled'] := True;
        end;

        if tblUsers['IsDisabled'] then
        begin
          pnlDisabled.caption := 'Enabled: No';
        end
        Else if NOT(tblUsers['IsDisabled']) then
        begin
          pnlDisabled.caption := 'Enabled: Yes';
        end;
      end;
      tblUsers.next;
    end;
  end;
end;

procedure TfrmUsers.cmbSelectUserChange(Sender: TObject);
var
  iSender, iReceiver, iCurrentKeyword, i, iWeight: integer;
  bFound: boolean;
  tKeywords: textfile;
  sMessage, sKeywords, sFindUser, sTemp, sKeyword: string;

begin
  redUsersKeywordMatches.lines.clear;
  sFindUser := cmbSelectUSer.text;
  Delete(sFindUser, 1, pos(' ', sFindUser));
  iUser := strtoint(copy(sFindUser, 1, pos(' ', sFindUser) - 2));
  bFound := False;
  iNumKeywords := 0;

  //Fetches keywords
  assignFile(tKeywords, 'Keywords.txt');
  if fileExists('Keywords.txt') then
  begin
    Reset(tKeywords);
    while not eof(tKeywords) do
    begin
      inc(iNumKeywords);
      readln(tKeywords, arrKeywords[iNumKeywords]);     //reads keywords into array
    end;
  end
  Else
  begin
    showmessage('Error finding keyword file');
    Exit;
  end;

  CloseFIle(tKeywords);

  with dmdbWhysapp do
  begin
    tblUsers.open;
    tblUsers.first;

    //Displays all info for user
    while not(tblUsers.eof) and (not bFound) do
    begin
      if tblUsers['UserID'] = iUser then
      begin
        pnlUserID.caption := 'UserID: ' + inttostr(tblUsers['UserID']);
        pnlFirst_name.caption := 'First Name: ' + tblUsers['First_name'];
        pnlSurname.caption := 'Surname: ' + tblUsers['Surname'];
        pnlPassword.caption := 'Password: ' + tblUsers['Password'];
        pnlBirthday.caption := 'Date of birth: ' + tblUsers['DateOfBirth'];

        if tblUsers['IsDisabled'] then
        begin
          pnlDisabled.caption := 'Enabled: No';
        end
        Else if NOT(tblUsers['IsDisabled']) then
        begin
          pnlDisabled.caption := 'Enabled: Yes';
        end;

        pnlType.caption := 'User Type: ' + tblUsers['UserType'];

        bFound := True;
      end;
      tblUsers.next;
    end;

    //Prepares to display messages containing keywords on rich edit
    redUsersKeywordMatches.lines.add('Messages containing keywords for this user');
    redUsersKeywordMatches.lines.add('__________________________________________' + #13);

    tblMessages.open;
    tblMessages.first;

    while not(tblMessages.eof) do
    begin
      //checks which two users it is
      iUser1 := tblMessages['SenderID'];
      iUser2 := tblMessages['ReceiverID'];

      //Checks if the message was sent or received by the user
      if (tblMessages['SenderID'] = iUser) or (tblMessages['ReceiverID'] = iUser)
      then
      begin
        bFound := False;
        iCurrentKeyword := 1;
        iUser1 := tblMessages['SenderID'];
        iUser2 := tblMessages['ReceiverID'];

        //Fetches decrypted message
        sMessage := Decrypt(tblMessages['Message']);

        //Sets it so no keywords have been found
        for i := 1 to iNumKeywords do
        begin
          arrFound[i] := False;

          sTemp := frmManageKeywords.Decryptkeyword(ArrKeywords[i]);

          arrWeight[i] :=  strtoint(COPY(sTemp, pos('¡', sTemp) + 1, 2));
        end;

        //Checks for all keywords if they can be found
        for iCurrentKeyword := 1 to iNumKeywords do
        begin
          if pos(UpperCase(COPY(frmManageKeywords.Decryptkeyword(arrKeywords[iCurrentKeyword]), 1, pos('¡', frmManageKeywords.Decryptkeyword(arrKeywords[iCurrentKeyword])) - 1)), UpperCase(sMessage)) > 0 then
          Begin
            bFound := True;

            arrFound[iCurrentKeyword] := True;
          End;
        end;

        //If any keywords were found the display
        if bFound then
        begin

          sKeywords := '';
          iWeight := 0;
          for i := 1 to iNumKeywords do
          begin
            if arrFound[i] = True then
            begin
              sKeyword := FrmManageKeywords.Decryptkeyword(ArrKeywords[i]);

              sKeywords := sKeywords + COPY(sKeyword, 1, pos('¡', sKeyword) - 1) + ', ';     //Puts all found keywords into a string to display to user

              iWeight := iWeight + arrWeight[i];
            end;
          end;

          //Just deletes comma at end of string because of the way I added the keyword
          Delete(sKeywords, Length(sKeywords) - 1, 2);

          //Displays Messages
          redUsersKeywordMatches.lines.add('Sent by user: ' + inttostr(tblMessages['SenderID']));
          redUsersKeywordMatches.lines.add('Received by user: ' + inttostr(tblMessages['ReceiverID']));
          redUsersKeywordMatches.lines.add('Date: ' + Datetostr(tblMessages['DateSent']));
          redUsersKeywordMatches.lines.add('Keywords found: ' + sKeywords);
          redUsersKeywordMatches.lines.add('Weight of keywords found: ' + inttostr(iWeight));
          redUsersKeywordMatches.lines.add('Message ' + inttostr(tblMessages['MessageNo']) + ': ' + sMessage);
          redUsersKeywordMatches.lines.add('----------------');

        end;

      end;
      tblMessages.next;
    end;

  end;
end;

procedure TfrmUsers.cmbSortChange(Sender: TObject);
var
i : integer;
sSort : String;
begin
  with dmdbWhysapp do
    begin
      tblUsers.open;
      sSort := cmbSort.text;
      tblUsers.sort := sSort + ' ASC';
      cmbSelectUser.items.clear;

      tblUsers.first;
      tblUsers.next;

      while not(tblUsers.eof) do
        begin
          cmbSelectUser.items.add('UserID: ' + inttostr(tblusers['UserID']) + ', User name: ' + tblUsers['First_name'] + ' ' + tblUsers['Surname']);

          tblUsers.next;
        end;

      tblUSers.close;
    end;
end;

function TfrmUsers.Decrypt(sMessage: string): string;
var
  sName1, sName2, sKey, sDecrypted: string;
  iLetterKey: integer;
begin
  //initializing some variables
  sName1 := '';
  sName2 := '';
  sDecrypted := '';
  iLetterKey := 0;

  with dmdbWhysapp do
  begin
    tblUsers.open;
    tblUsers.first;
    //Gets first user name
    while not(tblUsers.eof) and (sName1 = '') do
    begin
      if (tblUsers['UserID'] = iUser1) or (tblUsers['UserID'] = iUser2) then
      begin
        sName1 := tblUsers['First_name'];
      end;
      tblUsers.next;
    end;
    //gets other user name
    while not(tblUsers.eof) and (sName2 = '') do
    begin
      if (tblUsers['UserID'] = iUser1) or (tblUsers['UserID'] = iUser2) then
      begin
        sName2 := tblUsers['First_name'];
      end;
      tblUsers.next;
    end;
    //Makes key from first 3 letters of each name(uses less letters if names are shorter than 3 letters
    if (Length(sName1) > 2) then
    begin
      if Length(sName2) > 2 then
      begin
        sKey := Copy(sName1, 1, 3) + Copy(sName2, 1, 3);
      end
      else
      begin
        sKey := Copy(sName1, 1, 3) + sName2;
      end;

    end
    else
    begin
      if Length(sName2) > 2 then
      begin
        sKey := sName1 + Copy(sName1, 1, 3);
      end
      else
      begin
        sKey := sName1 + sName2;
      end;
    end;

    //Decypts the message using the key
    while sMessage <> '' do
    Begin
      inc(iLetterKey);    //Manages what digit from key is used

      if iLetterKey > Length(sKey) then
      begin
        iLetterKey := 1;
      end;

      iLetter := strtoint(Copy(sMessage, 1, pos(' ', sMessage) - 1));           //Gets encoded digit to convert
      Delete(sMessage, 1, pos(' ', sMessage));                                  //Deletes digit after it has been fetched
      iLetter := iLetter - ord(sKey[iLetterKey]);                               //subtracts value of key from encoded digit of meesage
      sDecrypted := sDecrypted + chr(iLetter);                                  //adds decoded letter of message to a string

    end;

  end;

  Result := sDecrypted;      //outputs decode message

end;

procedure TfrmUsers.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Application.Terminate;
end;

procedure TfrmUsers.FormShow(Sender: TObject);
var
  i: integer;
begin
  pnlUserID.caption     := 'UserID:';
  pnlFirst_name.Caption := 'First name:';
  pnlSurname.caption    := 'Surname';
  pnlPassword.caption   := 'Password:';
  pnlDisabled.Caption   := 'Enabled:';
  pnlType.caption       := 'User type:';
  pnlBirthday.caption   := 'DateOfBirth';
  redUsersKEywordMatches.lines.clear;


  iNumUsers := 0;


  with dmdbWhysapp do
  begin
    tblUsers.open;
    tblUsers.first;

    //fetches users
    while not tblUsers.eof do
    begin
      inc(iNumUsers);

      ArrUserID[iNumUsers]   := tblUsers['UserID'];
      ArrUserName[iNumUsers] := tblUsers['First_name'] + ' ' + tblUsers['Surname'];

      tblUsers.next;
    end;

    cmbSelectUser.items.clear;
   //adds users to combo box
    for i := 2 to iNumUsers do
    begin
      cmbSelectUser.items.add('UserID: ' + inttostr(ArrUserID[i]) + ', User name: ' + ArrUserName[i]);
    end;
  end;

  iUser := 0;

  cmbSelectUser.Style := csOwnerDrawFixed;
  cmbSort.style       := csOwnerDrawFixed;
end;

end.
