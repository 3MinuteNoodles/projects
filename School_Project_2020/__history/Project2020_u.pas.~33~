//Etienne Tredoux's project 2020
unit Project2020_u;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ComCtrls, Vcl.ExtCtrls;

type
  TFrmWhosApp = class(TForm)
    pnlTop: TPanel;
    pnlDevice1: TPanel;
    pnlScreen1: TPanel;
    edtMessage1: TEdit;
    btnSend1: TButton;
    btnDecryptRecievedMessages1: TButton;
    Image1: TImage;
    btnHelp1: TButton;
    lbl1Sent1: TLabel;
    lbl1Received2: TLabel;
    lbl1Sent3: TLabel;
    lbl1Received3: TLabel;
    lbl1Sent2: TLabel;
    lbl1Received1: TLabel;
    btnEncode1: TButton;
    lblCharacters1: TLabel;
    pnlDevice2: TPanel;
    Image2: TImage;
    lblCharacters2: TLabel;
    pnlScreen2: TPanel;
    lbl2Sent1: TLabel;
    lbl2Received2: TLabel;
    lbl2Sent3: TLabel;
    lbl2Received3: TLabel;
    lbl2Sent2: TLabel;
    lbl2Received1: TLabel;
    edtMessage2: TEdit;
    btnSend2: TButton;
    btnDecryptRecievedMessage2: TButton;
    Button8: TButton;
    btnEncode2: TButton;
    memHelp1: TMemo;
    btnUnderstood: TButton;
    procedure FormShow(Sender: TObject);
    procedure btnSend1Click(Sender: TObject);
    procedure btnEncode1Click(Sender: TObject);
    procedure btnSend2Click(Sender: TObject);
    procedure btnEncode2Click(Sender: TObject);
    procedure btnDecryptRecievedMessages1Click(Sender: TObject);
    procedure btnDecryptRecievedMessage2Click(Sender: TObject);
    procedure btnUnderstoodClick(Sender: TObject);
    procedure btnHelp1Click(Sender: TObject);
    procedure edtMessage2Change(Sender: TObject);
    procedure edtMessage1Change(Sender: TObject);
  private
    { Private declarations }
   //variables here that need to be global or that use the same name in multiple places
   bMessageEncoded1, bMessageEncoded2 : boolean;
   sKey, sMessage : String;
   iValueKey, iValueMessage, iValueEncoded, iKeyCounter, iCounter : integer;
   Var arrEncoded1 : array[1..6] of boolean;
   Var arrEncoded2 : array[1..6] of boolean;
   procedure Decryption;

  public
    { Public declarations }
  end;

var
  FrmWhosApp: TFrmWhosApp;

implementation

{$R *.dfm}

procedure TFrmWhosApp.Decryption;
Begin
  //a part of the decryption that is repeated alot
  case sMessage[iCounter] of
    'a'..'z' : iValueMessage := ORD(sMessage[iCounter]) - 96;
    'A'..'Z' : iValueMessage := ORD(sMessage[iCounter])  - 38;
    ','      : iValueMessage := 53;
    '.'      : iValueMessage := 54;
    '?'      : iValueMessage := 55;
    '!'      : iValueMessage := 56;
    ' '      : iValueMessage := 57;
  end;

  case sKey[iKeyCounter] of
    'a'..'z' : iValueKey := ORD(sKey[iKeyCounter]) - 96;
    'A'..'Z' : iValueKey := ORD(sKey[iKeyCounter])  - 38;
    ','      : iValueKey := 53;
    '.'      : iValueKey := 54;
    '?'      : iValueKey := 55;
    '!'      : iValueKey := 56;
    ' '      : iValueKey := 57;
  end;

  iValueEncoded := iValueMessage - iValueKey;

  if iValueEncoded < 1 then
    Begin
      iValueEncoded := iValueEncoded + 57;
    End;

  if iKeyCounter < Length(sKey) then
    Begin
      inc(iKeyCounter);
    End
  Else
    Begin
      iKeyCounter := 1;
    End;
End;

procedure TFrmWhosApp.btnDecryptRecievedMessages1Click(Sender: TObject);
  Var
  sDecoded : string;
  i        : integer;
begin
  //checking to see if each label is encoded and decoding if it is
  if (arrEncoded1[1]) And (lbl1Sent1.Visible) then
    Begin
      iKeyCounter     := 1;
      sMessage        := lbl1Sent1.Caption;
      sDecoded        := '';

      for i := 1 to Length(sMessage) do
        Begin
          iCounter := i;
          Decryption;

           case iValueEncoded of
             1..26  : sDecoded := sDecoded + Chr(96 + iValueEncoded);
             27..52 : sDecoded := sDecoded + Chr(38 + iValueEncoded);
             53     : sDecoded := sDecoded + ',';
             54     : sDecoded := sDecoded + '.';
             55     : sDecoded := sDecoded + '?';
             56     : sDecoded := sDecoded + '!';
             57     : sDecoded := sDecoded + ' ';
           end;

           lbl1Sent1.Caption  := sDecoded;
           arrEncoded1[1]     := False;
        End;
    End;

    if (arrEncoded1[2]) and (lbl1Sent2.Visible) then
    Begin
      iKeyCounter     := 1;
      sMessage        := lbl1Sent2.Caption;
      sDecoded        := '';

      for i := 1 to Length(sMessage) do
        Begin
          iCounter := i;
          Decryption;

           case iValueEncoded of
             1..26  : sDecoded := sDecoded + Chr(96 + iValueEncoded);
             27..52 : sDecoded := sDecoded + Chr(38 + iValueEncoded);
             53     : sDecoded := sDecoded + ',';
             54     : sDecoded := sDecoded + '.';
             55     : sDecoded := sDecoded + '?';
             56     : sDecoded := sDecoded + '!';
             57     : sDecoded := sDecoded + ' ';
           end;

           lbl1Sent2.Caption  := sDecoded;
           arrEncoded1[2]     := False;
        End;
    End;

    if (arrEncoded1[3]) AND (lbl1Sent3.Visible) then
    Begin
      iKeyCounter     := 1;
      sMessage        := lbl1Sent3.Caption;
      sDecoded        := '';

      for i := 1 to Length(sMessage) do
        Begin
          iCounter := i;
          Decryption;

           case iValueEncoded of
             1..26  : sDecoded := sDecoded + Chr(96 + iValueEncoded);
             27..52 : sDecoded := sDecoded + Chr(38 + iValueEncoded);
             53     : sDecoded := sDecoded + ',';
             54     : sDecoded := sDecoded + '.';
             55     : sDecoded := sDecoded + '?';
             56     : sDecoded := sDecoded + '!';
             57     : sDecoded := sDecoded + ' ';
           end;

           lbl1Sent3.Caption  := sDecoded;
           arrEncoded1[3]     := False;
        End;
    End;

    if (arrEncoded1[4]) AND (lbl1Received1.Visible) then
    Begin
      iKeyCounter     := 1;
      sMessage        := lbl1Received1.Caption;
      sDecoded        := '';

      for i := 1 to Length(sMessage) do
        Begin
          iCounter := i;
          Decryption;

           case iValueEncoded of
             1..26  : sDecoded := sDecoded + Chr(96 + iValueEncoded);
             27..52 : sDecoded := sDecoded + Chr(38 + iValueEncoded);
             53     : sDecoded := sDecoded + ',';
             54     : sDecoded := sDecoded + '.';
             55     : sDecoded := sDecoded + '?';
             56     : sDecoded := sDecoded + '!';
             57     : sDecoded := sDecoded + ' ';
           end;

           lbl1Received1.Caption  := sDecoded;
           arrEncoded1[4]     := False;
        End;
    End;

    if (arrEncoded1[5]) AND (lbl1Received2.Visible) then
    Begin
      iKeyCounter     := 1;
      sMessage        := lbl1Received2.Caption;
      sDecoded        := '';

      for i := 1 to Length(sMessage) do
        Begin
          iCounter := i;
          Decryption;

           case iValueEncoded of
             1..26  : sDecoded := sDecoded + Chr(96 + iValueEncoded);
             27..52 : sDecoded := sDecoded + Chr(38 + iValueEncoded);
             53     : sDecoded := sDecoded + ',';
             54     : sDecoded := sDecoded + '.';
             55     : sDecoded := sDecoded + '?';
             56     : sDecoded := sDecoded + '!';
             57     : sDecoded := sDecoded + ' ';
           end;

           lbl1Received2.Caption  := sDecoded;
           arrEncoded1[5]     := False;
        End;
    End;

    if (arrEncoded1[6]) AND (lbl1Received3.Visible) then
    Begin
      iKeyCounter     := 1;
      sMessage        := lbl1Received3.Caption;
      sDecoded        := '';

      for i := 1 to Length(sMessage) do
        Begin
          iCounter := i;
          Decryption;

           case iValueEncoded of
             1..26  : sDecoded := sDecoded + Chr(96 + iValueEncoded);
             27..52 : sDecoded := sDecoded + Chr(38 + iValueEncoded);
             53     : sDecoded := sDecoded + ',';
             54     : sDecoded := sDecoded + '.';
             55     : sDecoded := sDecoded + '?';
             56     : sDecoded := sDecoded + '!';
             57     : sDecoded := sDecoded + ' ';
           end;

           lbl1Received3.Caption  := sDecoded;
           arrEncoded1[6]     := False;
        End;
    End;
end;

procedure TFrmWhosApp.btnEncode1Click(Sender: TObject);
 Var
  sEncodedDecoded : string;
  i : integer;
begin
 // Encrypiting/decrypting message that you are sending
  iKeyCounter     := 1;
  sMessage        := edtMessage1.Text;
  sEncodedDecoded := '';

  if bMessageEncoded1 = False then
    Begin
      for i := 1 to Length(sMessage) do
        Begin
          iCounter := i;
          case sMessage[iCounter] of
            'a'..'z' : iValueMessage := ORD(sMessage[iCounter]) - 96;
            'A'..'Z' : iValueMessage := ORD(sMessage[iCounter])  - 38;
            ','      : iValueMessage := 53;
            '.'      : iValueMessage := 54;
            '?'      : iValueMessage := 55;
            '!'      : iValueMessage := 56;
            ' '      : iValueMessage := 57;
          end;

          case sKey[iKeyCounter] of
            'a'..'z' : iValueKey := ORD(sKey[iKeyCounter]) - 96;
            'A'..'Z' : iValueKey := ORD(sKey[iKeyCounter])  - 38;
            ','      : iValueKey := 53;
            '.'      : iValueKey := 54;
            '?'      : iValueKey := 55;
            '!'      : iValueKey := 56;
            ' '      : iValueKey := 57;
          end;

          iValueEncoded := iValueMessage + iValueKey;

          if iValueEncoded > 57 then
            Begin
              iValueEncoded := iValueEncoded - 57;
            End;

          if iKeyCounter < Length(sKey) then
            Begin
              inc(iKeyCounter);
            End
           Else
            Begin
              iKeyCounter := 1;
            End;

           case iValueEncoded of
             1..26  : sEncodedDecoded := sEncodedDecoded + Chr(96 + iValueEncoded);
             27..52 : sEncodedDecoded := sEncodedDecoded + Chr(38 + iValueEncoded);
             53     : sEncodedDecoded := sEncodedDecoded + ',';
             54     : sEncodedDecoded := sEncodedDecoded + '.';
             55     : sEncodedDecoded := sEncodedDecoded + '?';
             56     : sEncodedDecoded := sEncodedDecoded + '!';
             57     : sEncodedDecoded := sEncodedDecoded + ' ';
           end;

           edtMessage1.Text     := sEncodedDecoded;
        End;
        bMessageEncoded1     := True;
        edtMessage1.ReadOnly := True;
        btnSend1.Enabled     := True;
    End
   Else
    Begin
      for i := 1 to Length(sMessage) do
        Begin
          iCounter := i;
          Decryption;

           case iValueEncoded of
             1..26  : sEncodedDecoded := sEncodedDecoded + Chr(96 + iValueEncoded);
             27..52 : sEncodedDecoded := sEncodedDecoded + Chr(38 + iValueEncoded);
             53     : sEncodedDecoded := sEncodedDecoded + ',';
             54     : sEncodedDecoded := sEncodedDecoded + '.';
             55     : sEncodedDecoded := sEncodedDecoded + '?';
             56     : sEncodedDecoded := sEncodedDecoded + '!';
             57     : sEncodedDecoded := sEncodedDecoded + ' ';
           end;

           edtMessage1.Text     := sEncodedDecoded;
        End;
           bMessageEncoded1     := False;
           edtMessage1.ReadOnly := False;
           btnSend1.Enabled     := False;
    End;
end;

procedure TFrmWhosApp.btnEncode2Click(Sender: TObject);
 Var
  sEncodedDecoded : string;
  i : integer;
begin
 // Encrypting/Decrypting message that you are sending
  iKeyCounter     := 1;
  sMessage        := edtMessage2.Text;
  sEncodedDecoded := '';

  if bMessageEncoded2 = False then
    Begin
      for i := 1 to Length(sMessage) do
        Begin
          case sMessage[i] of
            'a'..'z' : iValueMessage := ORD(sMessage[i]) - 96;
            'A'..'Z' : iValueMessage := ORD(sMessage[i])  - 38;
            ','      : iValueMessage := 53;
            '.'      : iValueMessage := 54;
            '?'      : iValueMessage := 55;
            '!'      : iValueMessage := 56;
            ' '      : iValueMessage := 57;
          end;

          case sKey[iKeyCounter] of
            'a'..'z' : iValueKey := ORD(sKey[iKeyCounter]) - 96;
            'A'..'Z' : iValueKey := ORD(sKey[iKeyCounter])  - 38;
            ','      : iValueKey := 53;
            '.'      : iValueKey := 54;
            '?'      : iValueKey := 55;
            '!'      : iValueKey := 56;
            ' '      : iValueKey := 57;
          end;

          iValueEncoded := iValueMessage + iValueKey;

          if iValueEncoded > 57 then
            Begin
              iValueEncoded := iValueEncoded - 57;
            End;

          if iKeyCounter < Length(sKey) then
            Begin
              inc(iKeyCounter)
            End
           Else
            Begin
              iKeyCounter := 1;
            End;

           case iValueEncoded of
             1..26  : sEncodedDecoded := sEncodedDecoded + Chr(96 + iValueEncoded);
             27..52 : sEncodedDecoded := sEncodedDecoded + Chr(38 + iValueEncoded);
             53     : sEncodedDecoded := sEncodedDecoded + ',';
             54     : sEncodedDecoded := sEncodedDecoded + '.';
             55     : sEncodedDecoded := sEncodedDecoded + '?';
             56     : sEncodedDecoded := sEncodedDecoded + '!';
             57     : sEncodedDecoded := sEncodedDecoded + ' ';
           end;

           edtMessage2.Text     := sEncodedDecoded;
           bMessageEncoded2     := True;
           edtMessage2.ReadOnly := True;
           btnSend2.Enabled     := True;
        End;
    End
   Else
    Begin
      for i := 1 to Length(sMessage) do
        Begin
          iCounter := i;
          Decryption;

           case iValueEncoded of
             1..26  : sEncodedDecoded := sEncodedDecoded + Chr(96 + iValueEncoded);
             27..52 : sEncodedDecoded := sEncodedDecoded + Chr(38 + iValueEncoded);
             53     : sEncodedDecoded := sEncodedDecoded + ',';
             54     : sEncodedDecoded := sEncodedDecoded + '.';
             55     : sEncodedDecoded := sEncodedDecoded + '?';
             56     : sEncodedDecoded := sEncodedDecoded + '!';
             57     : sEncodedDecoded := sEncodedDecoded + ' ';
           end;

           edtMessage2.Text     := sEncodedDecoded;
           bMessageEncoded2     := False;
           edtMessage2.ReadOnly := False;
           btnSend2.Enabled     := False;
        End;
    End;
end;

procedure TFrmWhosApp.btnHelp1Click(Sender: TObject);
begin
 memHelp1.Visible      := True;
 btnUnderstood.Visible := True;
 btnUnderstood.Enabled := True
end;

procedure TFrmWhosApp.btnSend1Click(Sender: TObject);
begin
 //moving the displayed messages and displaying new one on device 1
 lbl1Sent3.Caption     := lbl1Sent2.Caption;
 lbl1Sent2.Caption     := lbl1Sent1.Caption;
 lbl1Sent1.Caption     := edtMessage1.Text;
 lbl1Received3.Caption := lbl1Received2.Caption;
 lbl1Received2.Caption := lbl1Received1.Caption;
 lbl1Received1.Caption := '';
 //Making sure we know which messages are encoded for device 1
 arrEncoded1[3] := arrEncoded1[2];
 arrEncoded1[2] := arrEncoded1[1];
 arrEncoded1[1] := True;
 arrEncoded1[6] := arrEncoded1[5];
 arrEncoded1[5] := arrEncoded1[4];
 arrEncoded1[4] := True;
 //making sure we know which messages are encoded for device 2
 arrEncoded2[3] := arrEncoded2[2];
 arrEncoded2[2] := arrEncoded2[1];
 arrEncoded2[1] := True;
 arrEncoded2[6] := arrEncoded2[5];
 arrEncoded2[5] := arrEncoded2[4];
 arrEncoded2[4] := True;
 //making sure the right labels are displayed on device 1
 if lbl1Sent3.Caption = '' then
   Begin
     lbl1Sent3.Visible := False;
   End
  Else
   Begin
     lbl1Sent3.Visible := True;
   End;

 if lbl1Sent2.Caption = '' then
   Begin
     lbl1Sent2.Visible := False;
   End
  Else
   Begin
     lbl1Sent2.Visible := True;
   End;

 if lbl1Sent1.Caption = '' then
   Begin
     lbl1Sent1.Visible := False;
   End
  Else
   Begin
     lbl1Sent1.Visible := True;
   End;

  if lbl1Received3.Caption = '' then
    Begin
      lbl1Received3.Visible := False;
    End
   Else
    Begin
      lbl1Received3.Visible := True;
    End;

  if lbl1Received2.Caption = '' then
    Begin
      lbl1Received2.Visible := False;
    End
   Else
    Begin
      lbl1Received2.Visible := True;
    End;

  if lbl1Received1.Caption = '' then
    Begin
      lbl1Received1.Visible := False;
    End
   Else
    Begin
      lbl1Received1.Visible := True;
    End;

  //moving the displayed messages and displaying new one on device 2
  lbl2Sent3.Caption     := lbl2Sent2.Caption;
  lbl2Sent2.Caption     := lbl2Sent1.Caption;
  lbl2Sent1.Caption     := '';
  lbl2Received3.Caption := lbl2Received2.Caption;
  lbl2Received2.Caption := lbl2Received1.Caption;
  lbl2Received1.Caption := edtMessage1.Text;

  //making sure the right labels are displayed on device 2
  if lbl2Sent3.Caption = '' then
    Begin
      lbl2Sent3.Visible := False;
    End
   Else
    Begin
      lbl2Sent3.Visible := True;
    End;

  if lbl2Sent2.Caption = '' then
    Begin
      lbl2Sent2.Visible := False;
    End
   Else
    Begin
      lbl2Sent2.Visible := True;
    End;

  if lbl2Sent1.Caption = '' then
    Begin
      lbl2Sent1.Visible := False;
    End
   Else
    Begin
      lbl2Sent1.Visible := True;
    End;

  if lbl2Received3.Caption = '' then
    Begin
      lbl2Received3.Visible := False;
    End
   Else
    Begin
      lbl2Received3.Visible := True;
    End;

  if lbl2Received2.Caption = '' then
    Begin
      lbl2Received2.Visible := False;
    End
   Else
    Begin
      lbl2Received2.Visible := True;
    End;

  if lbl2Received1.Caption = '' then
    Begin
      lbl2Received1.Visible := False;
    End
   Else
    Begin
      lbl2Received1.Visible := True;
    End;
end;

procedure TFrmWhosApp.btnSend2Click(Sender: TObject);
begin
  //moving the displayed messages and displaying new one on device 2
 lbl2Sent3.Caption     := lbl2Sent2.Caption;
 lbl2Sent2.Caption     := lbl2Sent1.Caption;
 lbl2Sent1.Caption     := edtMessage2.Text;
 lbl2Received3.Caption := lbl2Received2.Caption;
 lbl2Received2.Caption := lbl2Received1.Caption;
 lbl2Received1.Caption := '';
 //Making sure we know which messages are encoded for device 1
 arrEncoded1[3] := arrEncoded1[2];
 arrEncoded1[2] := arrEncoded1[1];
 arrEncoded1[1] := True;
 arrEncoded1[6] := arrEncoded1[5];
 arrEncoded1[5] := arrEncoded1[4];
 arrEncoded1[4] := True;
 //making sure we know which messages are encoded for device 2
 arrEncoded2[3] := arrEncoded2[2];
 arrEncoded2[2] := arrEncoded2[1];
 arrEncoded2[1] := True;
 arrEncoded2[6] := arrEncoded2[5];
 arrEncoded2[5] := arrEncoded2[4];
 arrEncoded2[4] := True;
 //making sure the right labels are displayed on device 2
 if lbl2Sent3.Caption = '' then
   Begin
     lbl2Sent3.Visible := False;
   End
  Else
   Begin
     lbl2Sent3.Visible := True;
   End;

 if lbl2Sent2.Caption = '' then
   Begin
     lbl2Sent2.Visible := False;
   End
  Else
   Begin
     lbl2Sent2.Visible := True;
   End;

 if lbl2Sent1.Caption = '' then
   Begin
     lbl2Sent1.Visible := False;
   End
  Else
   Begin
     lbl2Sent1.Visible := True;
   End;

  if lbl2Received3.Caption = '' then
    Begin
      lbl2Received3.Visible := False;
    End
   Else
    Begin
      lbl2Received3.Visible := True;
    End;

  if lbl2Received2.Caption = '' then
    Begin
      lbl2Received2.Visible := False;
    End
   Else
    Begin
      lbl2Received2.Visible := True;
    End;

  if lbl2Received1.Caption = '' then
    Begin
      lbl2Received1.Visible := False;
    End
   Else
    Begin
      lbl2Received1.Visible := True;
    End;

  //moving the displayed messages and displaying new one on device 1
  lbl1Sent3.Caption     := lbl1Sent2.Caption;
  lbl1Sent2.Caption     := lbl1Sent1.Caption;
  lbl1Sent1.Caption     := '';
  lbl1Received3.Caption := lbl1Received2.Caption;
  lbl1Received2.Caption := lbl1Received1.Caption;
  lbl1Received1.Caption := edtMessage2.Text;

  //making sure the right labels are displayed on device 1
  if lbl1Sent3.Caption = '' then
    Begin
      lbl1Sent3.Visible := False;
    End
   Else
    Begin
      lbl1Sent3.Visible := True;
    End;

  if lbl1Sent2.Caption = '' then
    Begin
      lbl1Sent2.Visible := False;
    End
   Else
    Begin
      lbl1Sent2.Visible := True;
    End;

  if lbl1Sent1.Caption = '' then
    Begin
      lbl1Sent1.Visible := False;
    End
   Else
    Begin
      lbl1Sent1.Visible := True;
    End;

  if lbl1Received3.Caption = '' then
    Begin
      lbl1Received3.Visible := False;
    End
   Else
    Begin
      lbl1Received3.Visible := True;
    End;

  if lbl1Received2.Caption = '' then
    Begin
      lbl1Received2.Visible := False;
    End
   Else
    Begin
      lbl1Received2.Visible := True;
    End;

  if lbl1Received1.Caption = '' then
    Begin
      lbl1Received1.Visible := False;
    End
   Else
    Begin
      lbl1Received1.Visible := True;
    End;
end;

procedure TFrmWhosApp.btnUnderstoodClick(Sender: TObject);
begin
 memHelp1.Visible       := False;
 btnUnderstood.Visible := False;
 btnUnderstood.Enabled := False;
end;

procedure TFrmWhosApp.btnDecryptRecievedMessage2Click(Sender: TObject);
  Var
  sDecoded : string;
  i : integer;
begin
  //checking to see if each label is encoded and decoding if it is
  if (arrEncoded2[1]) AND (lbl2Sent1.Visible) then
    Begin
      iKeyCounter     := 1;
      sMessage        := lbl2Sent1.Caption;
      sDecoded        := '';

      for i := 1 to Length(sMessage) do
        Begin
          iCounter := i;
          Decryption;

           case iValueEncoded of
             1..26  : sDecoded := sDecoded + Chr(96 + iValueEncoded);
             27..52 : sDecoded := sDecoded + Chr(38 + iValueEncoded);
             53     : sDecoded := sDecoded + ',';
             54     : sDecoded := sDecoded + '.';
             55     : sDecoded := sDecoded + '?';
             56     : sDecoded := sDecoded + '!';
             57     : sDecoded := sDecoded + ' ';
           end;

           lbl2Sent1.Caption  := sDecoded;
           arrEncoded2[1]     := False;
        End;
    End;

    if (arrEncoded2[2]) AND (lbl2Sent2.Visible) then
    Begin
      iKeyCounter     := 1;
      sMessage        := lbl2Sent2.Caption;
      sDecoded        := '';

      for i := 1 to Length(sMessage) do
        Begin
          iCounter := i;
          Decryption;

           case iValueEncoded of
             1..26  : sDecoded := sDecoded + Chr(96 + iValueEncoded);
             27..52 : sDecoded := sDecoded + Chr(38 + iValueEncoded);
             53     : sDecoded := sDecoded + ',';
             54     : sDecoded := sDecoded + '.';
             55     : sDecoded := sDecoded + '?';
             56     : sDecoded := sDecoded + '!';
             57     : sDecoded := sDecoded + ' ';
           end;

           lbl2Sent2.Caption  := sDecoded;
           arrEncoded2[2]     := False;
        End;
    End;

    if (arrEncoded2[3]) AND (lbl2Sent3.Visible) then
    Begin
      iKeyCounter     := 1;
      sMessage        := lbl2Sent3.Caption;
      sDecoded        := '';

      for i := 1 to Length(sMessage) do
        Begin
          iCounter := i;
          Decryption;

           case iValueEncoded of
             1..26  : sDecoded := sDecoded + Chr(96 + iValueEncoded);
             27..52 : sDecoded := sDecoded + Chr(38 + iValueEncoded);
             53     : sDecoded := sDecoded + ',';
             54     : sDecoded := sDecoded + '.';
             55     : sDecoded := sDecoded + '?';
             56     : sDecoded := sDecoded + '!';
             57     : sDecoded := sDecoded + ' ';
           end;

           lbl2Sent3.Caption  := sDecoded;
           arrEncoded2[3]     := False;
        End;
    End;

    if (arrEncoded2[4]) AND (lbl2Received1.Visible) then
    Begin
      iKeyCounter     := 1;
      sMessage        := lbl2Received1.Caption;
      sDecoded        := '';

      for i := 1 to Length(sMessage) do
        Begin
          iCounter := i;
          Decryption;

           case iValueEncoded of
             1..26  : sDecoded := sDecoded + Chr(96 + iValueEncoded);
             27..52 : sDecoded := sDecoded + Chr(38 + iValueEncoded);
             53     : sDecoded := sDecoded + ',';
             54     : sDecoded := sDecoded + '.';
             55     : sDecoded := sDecoded + '?';
             56     : sDecoded := sDecoded + '!';
             57     : sDecoded := sDecoded + ' ';
           end;

           lbl2Received1.Caption  := sDecoded;
           arrEncoded2[4]     := False;
        End;
    End;

    if (arrEncoded2[5]) AND (lbl2Received2.Visible) then
    Begin
      iKeyCounter     := 1;
      sMessage        := lbl2Received2.Caption;
      sDecoded        := '';

      for i := 1 to Length(sMessage) do
        Begin
          iCounter := i;
          Decryption;

           case iValueEncoded of
             1..26  : sDecoded := sDecoded + Chr(96 + iValueEncoded);
             27..52 : sDecoded := sDecoded + Chr(38 + iValueEncoded);
             53     : sDecoded := sDecoded + ',';
             54     : sDecoded := sDecoded + '.';
             55     : sDecoded := sDecoded + '?';
             56     : sDecoded := sDecoded + '!';
             57     : sDecoded := sDecoded + ' ';
           end;

           lbl2Received2.Caption  := sDecoded;
           arrEncoded2[5]     := False;
        End;
    End;

    if (arrEncoded2[6]) AND (lbl2Received3.Visible) then
    Begin
      iKeyCounter     := 1;
      sMessage        := lbl2Received3.Caption;
      sDecoded        := '';

      for i := 1 to Length(sMessage) do
        Begin
          iCounter := i;
          Decryption;

           case iValueEncoded of
             1..26  : sDecoded := sDecoded + Chr(96 + iValueEncoded);
             27..52 : sDecoded := sDecoded + Chr(38 + iValueEncoded);
             53     : sDecoded := sDecoded + ',';
             54     : sDecoded := sDecoded + '.';
             55     : sDecoded := sDecoded + '?';
             56     : sDecoded := sDecoded + '!';
             57     : sDecoded := sDecoded + ' ';
           end;

           lbl2Received3.Caption  := sDecoded;
           arrEncoded2[6]     := False;
        End;
    End;
end;

procedure TFrmWhosApp.edtMessage1Change(Sender: TObject);
Var
 iNumCharacters : integer;
begin
if edtMessage1.focused = true then
Begin
  //Finding how long the message is
  sMessage := edtMessage1.Text;
  iNumCharacters := Length(sMessage);
  //Making sure the message is not too long
  if iNumCharacters > 60 then
    Begin
      showmessage('Message can only be 60 characters long');

        while iNumCharacters > 60 do
          Begin
            Delete(sMessage, iNumCharacters, 1);
            iNumCharacters := Length(sMessage);
          End;

      edtMessage1.Text := sMessage;
    End;
  //Displayin how long the message is
  lblCharacters1.Caption := inttostr(iNumCharacters) + '/60 Characters';
  //checking if the entered character can be encoded

 if (sMessage <> '') then
   Begin
    if NOT(sMessage[iNumCharacters] IN ['a'..'z', 'A'..'Z', '?', '.', ',', '!', ' ']) then
     Begin
       Delete(sMessage, iNumCharacters, 1);
       Showmessage('Messages may only consist of: letters, commas, full stops, question marks, exclaimation marks and spaces');
     End;
   End;
  edtMessage1.Text := sMessage;
 End;
end;

procedure TFrmWhosApp.edtMessage2Change(Sender: TObject);
Var
 iNumCharacters : integer;
begin
if edtMessage2.Focused = true then
  Begin
   //Finding how long the message is
  sMessage := edtMessage2.Text;
  iNumCharacters := Length(sMessage);
  //Making sure the message is not too long
  if iNumCharacters > 60 then
    Begin
      showmessage('Message can only be 60 characters long');

        while iNumCharacters > 60 do
          Begin
            Delete(sMessage, iNumCharacters, 1);
            iNumCharacters := Length(sMessage);
          End;

      edtMessage1.Text := sMessage;
    End;
  //Displayin how long the message is
  lblCharacters2.Caption := inttostr(iNumCharacters) + '/60 Characters';
  End;
end;

procedure TFrmWhosApp.FormShow(Sender: TObject);
Var
i : integer;
begin
 //Hide devices
 pnlDevice1.Visible   := True;
 pnlDevice2.Visible   := True;
 // hide labels For device 1
 lbl1Sent1.Visible     := False;
 lbl1Sent2.Visible     := False;
 lbl1Sent3.Visible     := False;
 lbl1Received1.Visible := False;
 lbl1Received2.Visible := False;
 lbl1Received3.Visible := False;
 //Hide labels for device 2
 lbl2Sent1.Visible     := False;
 lbl2Sent2.Visible     := False;
 lbl2Sent3.Visible     := False;
 lbl2Received1.Visible := False;
 lbl2Received2.Visible := False;
 lbl2Received3.Visible := False;
 //Initializing variables
 bMessageEncoded1     := False;
 bMessageEncoded2     := False;

 sKey          := 'zJl2?pI,.!';

 for i := 1 to 6 do
   Begin
     arrEncoded1[i] := true;
   End;

 for i := 1 to 6 do
   Begin
     arrEncoded2[i] := true;
   End;
 //making sure you can't send messages that aren't encoded
 btnSend1.Enabled := False;
 btnSend2.Enabled := False;
end;

end.
